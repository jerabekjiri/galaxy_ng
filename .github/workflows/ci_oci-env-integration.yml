---
name: OCI Env Integration
on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  integration:
#    strategy:
#      fail-fast: false
#      matrix:
#        env:
##          - TEST_PROFILE: ldap
##          - TEST_PROFILE: keycloak
#          - TEST_PROFILE: standalone
##          # - TEST_PROFILE: rbac
##          - TEST_PROFILE: rbac_parallel_group_1
##          - TEST_PROFILE: rbac_parallel_group_2
##          - TEST_PROFILE: certified-sync
##          - TEST_PROFILE: insights
##          - TEST_PROFILE: iqe_rbac
##          - TEST_PROFILE: x_repo_search
##          - TEST_PROFILE: community
##          - TEST_PROFILE: dab_jwt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: (Linux) Install docker compose
        run: |
          curl -L -o /tmp/docker-compose https://github.com/docker/compose/releases/download/v2.29.1/docker-compose-linux-x86_64
          install /tmp/docker-compose /usr/local/bin/

      - name: spin up dev/compose/aap.yaml
        run: |
          docker compose -f dev/compose/aap.yaml up --detach

      - name: healthcheck
        run: |
          while true; do
            echo "checking api status..."
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u admin:admin -LI http://localhost:5001/api/galaxy/pulp/api/v3/status/)
            if [ "$RESPONSE" -ne 200 ]; then
              echo "API endpoint is down. Status code: $RESPONSE. Retrying..."
              sleep 10
            else
              echo "API online."
              exit 0
            fi
          done

#      - name: install requirements
#        run: |
#           docker compose -f dev/compose/aap.yaml exec manager /bin/bash -c "pip install -r integration_requirements.txt"

      - name: print env
        run: |
          echo "${{ env }}"

      - name: print inputs environment
        run: |
          echo "${{ inputs.environment }}"

      - name: print GITHUB_ENV
        run: |
          echo "$GITHUB_ENV"

      - name: load correct marker
        run: |
          echo "${{ env.HUB_TEST_MARKS }}"

#      - name: run tests
#        run: |
#          docker compose -f dev/compose/aap.yaml exec manager /bin/bash -c "pytest -m '' galaxy_ng/tests/integration"



      # Note: COMPOSE_INTERACTIVE_NO_CLI=1 is required for oci-env to work correctly when there's no interactive terminal
#      - name: Set environment variables
#        run: |
#          echo "OCI_ENV_PATH=${HOME}/work/galaxy_ng/oci_env" >> $GITHUB_ENV
#          echo "COMPOSE_INTERACTIVE_NO_CLI=1" >> $GITHUB_ENV
#          echo "OCI_VERBOSE=1" >> $GITHUB_ENV
#          echo "GH_DUMP_LOGS=1" >> $GITHUB_ENV
#
#      - name: Update apt
#        run: sudo apt -y update
#
#      - name: Install LDAP requirements
#        run: sudo apt-get install -y libsasl2-dev python3 libldap2-dev libssl-dev build-essential
#
#      - name: setup oci-env
#        run: |
#          git clone https://github.com/pulp/oci_env.git $OCI_ENV_PATH
#          pip install -e $OCI_ENV_PATH/client/
#          mkdir $OCI_ENV_PATH/db_backup/
#
#      - name: run integration tests
#        if: ${{ !startsWith(matrix.env.TEST_PROFILE, 'rbac_parallel_group') }}
#        run: make gh-action/${{ matrix.env.TEST_PROFILE }}
#
#      - name: run parallel rbac integration tests
#        if: ${{ startsWith(matrix.env.TEST_PROFILE, 'rbac_parallel_group') }}
#        run: make gh-action/rbac-parallel RBAC_PARALLEL_GROUP=${{ matrix.env.TEST_PROFILE }}
